<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Beny&#39;s Diary</title>
  
  <subtitle>记录点滴</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://amyge.com/blog/"/>
  <updated>2018-03-13T10:00:44.166Z</updated>
  <id>http://amyge.com/blog/</id>
  
  <author>
    <name>Beny</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>__declspec关键字详解</title>
    <link href="http://amyge.com/blog/post/16cae89c.html"/>
    <id>http://amyge.com/blog/post/16cae89c.html</id>
    <published>2018-03-13T09:51:15.000Z</published>
    <updated>2018-03-13T10:00:44.166Z</updated>
    
    <content type="html"><![CDATA[<p> <code>__declspec</code>用于指定所给定类型的实例的与Microsoft相关的存储方式。其它的有关存储方式的修饰符如static与extern等是C和C++语言的ANSI规范，而<code>__declspec</code>是一种扩展属性的定义。扩展属性语法简化并标准化了C和C++语言关于Microsoft的扩展。</p><p>用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__declspec ( extended-decl-modifier )</span><br></pre></td></tr></table></figure></p><p><code>extended-decl-modifier</code>参数如下，可同时出现，中间有空格隔开:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">align （C++）</span><br><span class="line"></span><br><span class="line">allocate</span><br><span class="line"></span><br><span class="line">appdomain</span><br><span class="line"></span><br><span class="line">deprecated （C++）</span><br><span class="line"></span><br><span class="line">dllimport</span><br><span class="line"></span><br><span class="line">dllexport</span><br><span class="line"></span><br><span class="line">jitintrinsic</span><br><span class="line"></span><br><span class="line">naked （C++）</span><br><span class="line"></span><br><span class="line">noalias</span><br><span class="line"></span><br><span class="line">noinline</span><br><span class="line"></span><br><span class="line">noreturn</span><br><span class="line"></span><br><span class="line">nothrow （C++）</span><br><span class="line"></span><br><span class="line">novtable</span><br><span class="line"></span><br><span class="line">process</span><br><span class="line"></span><br><span class="line">property（C++）</span><br><span class="line"></span><br><span class="line">restrict</span><br><span class="line"></span><br><span class="line">selectany</span><br><span class="line"></span><br><span class="line">thread</span><br><span class="line"></span><br><span class="line">uuid（C++）</span><br></pre></td></tr></table></figure></p><ul><li><p>1.<strong>declspec关键字应该出现在简单声明的前面。对于出现在*或&amp;后面或者变量声明中标识符的前面的</strong>declspec，编译器将忽略并且不给出警告。</p></li><li><p>2.要注意区分__declspec是修饰类型还是修饰变量：</p><p><strong>declspec(align(8)) struct Str b;修饰的是变量b。其它地方定义的struct Str类型的变量将不受</strong>declspec(align(8))影响。</p><p><strong>declspec(align(8)) struct Str {};修饰的是struct Str类型。所有该类型的变量都受</strong>declspec(align(8))影响。</p></li></ul><p>align：</p><p>格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__declspec(align(n)) declarator</span><br></pre></td></tr></table></figure></p><p>其中，n是对齐参数，其有效值是的整数次幂（从到字节），如，，，，或。参数declarator是要设置对齐方式的数据。</p><ul><li><p>1.使用<strong>declspec(align(n))来精确控制用户自定义数据的对齐方式。你可以在定义struct，union，class或声明变量时使用</strong>declspec(align(n))。</p></li><li><p>2.不能为函数参数使用__declspec(align(n))。</p></li><li><p>3.如果未使用__declspec(align(#))，编译器将根据数据大小按自然边界对齐。如字节整数按字节边界对齐；字节double按字节边界对齐。类或结构体中的数据，将取数据本身的自然对齐方式和#pragma pack(n)设置的对齐系数中的最小值进行对齐。</p></li><li><p>4.__declspec(align(n))和#pragma pack(n)是一对兄弟，前者规定了对齐系数的最小值，后者规定了对齐系数的最大值。</p></li><li><p>5.当两者同时出现时，前者拥有更高的优先级。即，当两者同时出现且值矛盾时，后者将不起作用。</p></li><li><p>6.当变量size大于等于#pragma pack(n)指定的n，而且<strong>declspec(align(n))指定的数值n比对应类型长度小的时候，这个</strong>declspec(align(n))指定将不起作用。</p></li><li><p>7.当#pragma pack(n)指定的值n大于等于所有数据成员size的时候，这个值n将不起作用。</p></li></ul><p>allocate：</p><p>格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__declspec(allocate(&quot;segname&quot;)) declarator</span><br></pre></td></tr></table></figure></p><p>为数据指定存储的数据段。数据段名必须为以下列举中的一个：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">code_seg</span><br><span class="line"></span><br><span class="line">const_seg</span><br><span class="line"></span><br><span class="line">data_seg</span><br><span class="line"></span><br><span class="line">init_seg</span><br><span class="line"></span><br><span class="line">section</span><br><span class="line"></span><br><span class="line">appdomain：</span><br><span class="line"></span><br><span class="line">指定托管程序中的每个应用程序域都要有一份指定全局变量或静态成员变量的拷贝。</span><br><span class="line"></span><br><span class="line">deprecated：</span><br><span class="line"></span><br><span class="line">与#pragma deprecated()的作用相同。用于指定函数的某个重载形式是不推荐的。当在程序中调用了被deprecated修饰的函数时，编译器将给出C4996警告，并且可以指定具体的警告信息。该警告信息可以来源于定义的宏。</span><br></pre></td></tr></table></figure></p><p>例如：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// compile with: /W3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MY_TEXT <span class="meta-string">"function is deprecated"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">__declspec(deprecated) <span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">(<span class="keyword">int</span>)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">__declspec(deprecated(<span class="string">"** this is a deprecated function **"</span>)) <span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span>)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">__declspec(deprecated(MY_TEXT)) <span class="function"><span class="keyword">void</span> <span class="title">func3</span><span class="params">(<span class="keyword">int</span>)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   func1();</span><br><span class="line"></span><br><span class="line">   func1(<span class="number">1</span>);   <span class="comment">// C4996，警告信息：warning C4996: 'func1': was declared deprecated</span></span><br><span class="line"></span><br><span class="line">   func2(<span class="number">1</span>);   <span class="comment">// C4996，警告信息：warning C4996: 'func2': ** this is a deprecated function **</span></span><br><span class="line"></span><br><span class="line">   func3(<span class="number">1</span>);   <span class="comment">// C4996，警告信息：warning C4996: 'func3': function is deprecated</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>dllimport，dllexport</strong>：</p><p>格式：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">__declspec( dllimport ) declarator</span><br><span class="line"></span><br><span class="line">__declspec( dllexport ) declarator</span><br></pre></td></tr></table></figure></p><p>分别用来从dll导入函数，数据，或对象以及从dll中导出函数，数据，或对象。相当于定义了dll的接口，为它的客户exe或dll定义可使用的函数，数据，或对象。</p><p>将函数声明成dllexport就可以免去定义模块定义(.DEF)文件。</p><p><strong>dllexport</strong>代替了 __export关键字。</p><p>被声明为dllexport的C++函数导出时的函数名将会按照C++规则经过处理。如果要求不按照C++规则进行名字处理，请使用.def文件或使用extern “C”。</p><p>jitintrinsic：</p><p>格式：__declspec(jitintrinsic)</p><p>用于标记一个函数或元素是位通用语言运行时(CLR)。主要用于Microsoft提供的某些库中。</p><p>使用jitintrinsic会在函数签名中加入MODOPT(IsJitIntrinsic)。</p><p>naked：</p><p>格式：__declspec(naked) declarator</p><p>此关键字仅用于x86系统，多用于虚拟设备驱动。此关键字可以使编译器在生成代码时不包含任何注释或标记。仅可以对函数的定义使用，不能用于数据声明、定义，或者函数的声明。</p><p>noalias：</p><p>仅适用于函数，它指出该函数是半纯粹的函数。半纯粹的函数是指仅引用或修改局部变量、参数和第一层间接参数。它是对编译器的一个承诺，如果该函数引用全局变量或第二层间接指针参数，则编译器会生成中断应用程序的代码。</p><p>restrict：</p><p>格式：__declspec(restrict) return_type f();</p><p>仅适用于返回指针的函数声明或定义，如，CRT的malloc函数：<strong>declspec(restrict) void *malloc(size_t size);它告诉编译器该函数返回的指针不会与任何其它的指针混淆。它为编译器提供执行编译器优化的更多信息。对于编译器来说，最大的困难之一是确定哪些指针会与其它指针混淆，而使用这些信息对编译器很有帮助。有必要指出，这是对编译器的一个承诺，编译器并不对其进行验证。如果您的程序不恰当地使用</strong>declspec(restrict)，则该程序的行为会不正确。</p><p>noinline：</p><p>因为在类定义中定义的成员函数默认都是inline的，__declspec(naked)用于显式指定类中的某个函数不需要inline(内联)。如果一个函数很小而且对系统性能影响不大，有必要将其声明为非内敛的。例如，用于处理错误情况的函数。</p><p>noreturn：</p><p>一个函数被<strong>declspec(noreturn)所修饰，那么它的含义是告诉编译器，这个函数不会返回，其结果是让编译器知道被修饰为</strong>declspec(noreturn)的函数之后的代码不可到达。</p><p>如果编译器发现一个函数有无返回值的代码分支，编译器将会报C4715警告，或者C2202错误信息。如果这个代码分支是因为函数不会返回从而无法到达的话，可以使用约定__declspec(noreturn)来避免上述警告或者错误。</p><p>将一个期望返回的函数约定为__declspec(noreturn)将导致未定义的行为。</p><p>在下面的这个例子中，main函数没有从else分支返回，所以约定函数fatal为__declspec(noreturn)来避免编译或警告信息。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">__declspec(noreturn) <span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">fatal</span> <span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">   fatal();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>nothrow:</p><p>格式：return-type __declspec(nothrow) [call-convention] function-name ([argument-list])</p><p>可用于函数声明。告诉编译器被声明的函数以及函数内部调用的其它函数都不会抛出异常。</p><p>novtable：</p><p>可用于任何类声明中，但最好只用于纯接口类，即类本身从不实例化。此关键字的声明将阻止编译器对构造和析构函数的vfptr的初始化。可优化编译后代码大小。</p><p>如果试图实例化一个用__declspec(novtable)声明的类然后访问类中成员，则会在运行时产生访问错误(access violation，即AV)。</p><p>process：</p><p>表示你的托管应用程序进程应该拥有一份指定全局变量，静态成员变量，或所有应用程序域共享的静态本地变量的拷贝。在使用/clr:pure进行编译时，应该使用 __declspec(process)，因为使用/clr:pure进行编译时，在默认情况下，每个应用程序域拥有一份全局和静态变量的拷贝。在使用/clr进行编译时，不必使用__declspec(process)，因为使用/clr进行编译时，在默认情况下，每个进程有一份全局和静态变量的拷贝。</p><p>只有全局变量，静态成员变量，或本地类型的本地静态变量可以用__declspec(process)修饰。</p><p>在使用/clr:pure进行编译时，被声明为__declspec(process)的变量同时也应该声明为const类型。</p><p>如果想每个应用程序域拥有一份全局变量的拷贝时，请使用appdomain。</p><p>property：</p><p>格式：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__declspec( property( get=get_func_name ) ) declarator</span><br><span class="line"></span><br><span class="line">__declspec( property( put=put_func_name ) ) declarator</span><br><span class="line"></span><br><span class="line">__declspec( property( get=get_func_name, put=put_func_name ) ) declarator</span><br></pre></td></tr></table></figure></p><p>该属性可用于类或结构定义中的非静态“虚数据成员”。实际上就是做了一个映射，把你的方法映射成属性，以供访问。get和put就是属性访问的权限，一个是读的权限，一个是写的权限。当编译器看到被property修饰的数据成员出现在成员选择符(“.” 或”-&gt;”)的右边的时候，它将把该操作转换成get或put方法。该修饰符也可用于类或结构定义中的空数组。</p><p>用法如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S</span> &#123;</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">putprop</span><span class="params">(<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      i = j;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">getprop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   __declspec(property(get = getprop, put = putprop)) <span class="keyword">int</span> the_prop;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   S s;</span><br><span class="line"></span><br><span class="line">   s.the_prop = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> s.the_prop;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>selectany：</p><p>格式：__declspec(selectany) declarator</p><p>在MFC，ATL的源代码中充斥着<strong>declspec(selectany)的声明。selectany可以让我们在.h文件中初始化一个全局变量而不是只能放在.cpp中。比如有一个类，其中有一个静态变量，那么我们可以在.h中通过类似</strong>declspec(selectany) type class::variable = value;这样的代码来初始化这个全局变量。既是该.h被多次include，链接器也会为我们剔除多重定义的错误。对于template的编程会有很多便利。</p><p>用法如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">__declspec(selectany) <span class="keyword">int</span> x1=<span class="number">1</span>; <span class="comment">//正确，x1被初始化，并且对外部可见</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> __declspec(selectany) <span class="keyword">int</span> x2 =<span class="number">2</span>; <span class="comment">//错误，在C++中，默认情况下const为static；但在C中是正确的，其默认情况下const不为static</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> __declspec(selectany) <span class="keyword">int</span> x3=<span class="number">3</span>; <span class="comment">//正确，x3是extern const，对外部可见</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">int</span> x4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> __declspec(selectany) <span class="keyword">int</span> x4=<span class="number">4</span>; <span class="comment">//正确，x4是extern const，对外部可见</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> __declspec(selectany) <span class="keyword">int</span> x5; <span class="comment">//错误，x5未初始化，不能用__declspec(selectany)修饰</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">X(<span class="keyword">int</span> i)&#123;i++;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">__declspec(selectany) <span class="function">X <span class="title">x</span><span class="params">(<span class="number">1</span>)</span></span>; <span class="comment">//正确，全局对象的动态初始化</span></span><br></pre></td></tr></table></figure></p><p>thread：</p><p>格式：__declspec(thread) declarator</p><p>声明declarator为线程局部变量并具有线程存储时限，以便链接器安排在创建线程时自动分配的存储。</p><p>线程局部存储(TLS)是一种机制，在多线程运行环境中，每个线程分配自己的局部数据。在标准多线程程序中，数据是在多个线程间共享的，而TLS是一种为每个线程分配自己局部数据的机制。</p><p>该属性只能用于数据或不含成员函数的类的声明和定义，不能用于函数的声明和定义。</p><p>该属性的使用可能会影响DLL的延迟载入。</p><p>该属性只能用于静态数据，包括全局数据对象(static和extern)，局部静态对象，类的静态数据成员；不能用于自动数据对象。</p><p>该属性必须同时用于数据的声明和定义，不管它的声明和定义是在一个文件还是多个文件。</p><p>__declspec(thread)不能用作类型修饰符。</p><p>如果在类声明的同时没有定义对象，则__declspec(thread)将被忽略，例如：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// compile with: /LD</span></span><br><span class="line"></span><br><span class="line">__declspec(thread) <span class="class"><span class="keyword">class</span> <span class="title">X</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">   <span class="keyword">int</span> I;</span><br><span class="line"></span><br><span class="line">&#125; x;   <span class="comment">//x是线程对象</span></span><br><span class="line"></span><br><span class="line">X y;   <span class="comment">//y不是线程对象</span></span><br></pre></td></tr></table></figure></p><p>下面两个例子从语义上来说是相同的：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">__declspec(thread) <span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">   <span class="keyword">int</span> data;</span><br><span class="line"></span><br><span class="line">&#125; BObject;   <span class="comment">//BObject是线程对象</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B2</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">   <span class="keyword">int</span> data;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">__declspec(thread) B2 BObject2;   <span class="comment">// BObject2是线程对象</span></span><br></pre></td></tr></table></figure></p><p>uuid：</p><p>格式：__declspec( uuid(“ComObjectGUID”) ) declarator</p><p>将具有唯一标识符号的已注册内容声明为一个变量，可使用__uuidof()调用。</p><p>用法如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">declspec</span>(<span class="title">uuid</span>("00000000-0000-0000-<span class="title">c000</span>-000000000046")) <span class="title">IUnknown</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">declspec</span>(<span class="title">uuid</span>("&#123;</span><span class="number">00020400</span><span class="number">-0000</span><span class="number">-0000</span>-c000<span class="number">-000000000046</span>&#125;<span class="string">")) IDispatch;</span></span><br></pre></td></tr></table></figure></p><p>原文链接：<a href="http://hi.baidu.com/baiyw920/blog/item/a06ddb986314fd0f6e068c0c.html" target="_blank" rel="noopener">http://hi.baidu.com/baiyw920/blog/item/a06ddb986314fd0f6e068c0c.html</a></p><p>– end</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; &lt;code&gt;__declspec&lt;/code&gt;用于指定所给定类型的实例的与Microsoft相关的存储方式。其它的有关存储方式的修饰符如static与extern等是C和C++语言的ANSI规范，而&lt;code&gt;__declspec&lt;/code&gt;是一种扩展属性的定义。扩展属
      
    
    </summary>
    
      <category term="后端" scheme="http://amyge.com/blog/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="C/C++" scheme="http://amyge.com/blog/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>访问URL时传入另一个URL作为参数</title>
    <link href="http://amyge.com/blog/post/4e59e7c5.html"/>
    <id>http://amyge.com/blog/post/4e59e7c5.html</id>
    <published>2018-03-13T09:30:04.000Z</published>
    <updated>2018-03-13T10:00:32.925Z</updated>
    
    <content type="html"><![CDATA[<p>有的时候我们需要在访问一个URL时传入另一个URL，同时给后面的URL带参数，这种情况下很容把参数传给第一个URL（实际上浏览器也是这么解析的），这种情况怎么办呢<br>比如，现在要访问地址：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.1/login.html?a=1&amp;b=2&amp;url=/device.html?c=3&amp;d=4</span><br></pre></td></tr></table></figure></p><p>按照我们的本意，<code>c=3&amp;d=4</code>这两个参数都是要传给第二个URL的，但实际上，d=4 这个参数会被当做是访问 login.html 时的参数，而不是 device.html 的参数。</p><p>解决办法：</p><p>对url 参数内容进行编码，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.1/login.html?a=1&amp;b=2&amp;url=escape(/device.html?c=3&amp;d=4)</span><br></pre></td></tr></table></figure></p><p>后端获取的时候再使用 unescape() 进行解码，就能拿到完整的路径及参数了</p><p>But，对于已经发布版本的项目来说，不能修改后端代码，咋整？</p><p>简单看了一下<code>escape()</code>的实现，发现它仅仅只是对部分特殊字符进行转义<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">escape</span>(<span class="string">"Visit W3School!"</span>) + <span class="string">"&lt;br /&gt;"</span>)</span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">escape</span>(<span class="string">"?!=()#%&amp;"</span>))</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Visit%20W3School%21</span><br><span class="line">%3F%21%3D%28%29%23%25%26</span><br></pre></td></tr></table></figure></p><p>感觉有点草率啊~~~<br>既然这样，那为啥咱不直接手动输入转义字符呢？<br>比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.1/login.html?a=1&amp;b=2&amp;url=/device.html?c=3%26d=4</span><br></pre></td></tr></table></figure></p><p>是的，确实可以，而且可以增加参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.1/login.html?a=1&amp;b=2&amp;url=/device.html?c=3%26d=4%26e=5</span><br></pre></td></tr></table></figure></p><p>在浏览器中直接输入，或者在前端代码中访问，都是可以的</p><h3 id="多看源码，多折腾，少逛头条，和抖音"><a href="#多看源码，多折腾，少逛头条，和抖音" class="headerlink" title="多看源码，多折腾，少逛头条，和抖音"></a>多看源码，多折腾，少逛头条，和抖音</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有的时候我们需要在访问一个URL时传入另一个URL，同时给后面的URL带参数，这种情况下很容把参数传给第一个URL（实际上浏览器也是这么解析的），这种情况怎么办呢&lt;br&gt;比如，现在要访问地址：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tabl
      
    
    </summary>
    
      <category term="前端" scheme="http://amyge.com/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://amyge.com/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>linux尽量避免使用system()函数,用popen()代替</title>
    <link href="http://amyge.com/blog/post/9ca378c1.html"/>
    <id>http://amyge.com/blog/post/9ca378c1.html</id>
    <published>2018-03-13T09:19:24.000Z</published>
    <updated>2018-03-13T09:28:57.341Z</updated>
    
    <content type="html"><![CDATA[<p>linux尽量避免使用system。<br>曾经的曾经，被<code>system()</code>函数折磨过，之所以这样，是因为对<code>system()</code>函数了解不够深入。只是简单的知道用这个函数执行一个系统命令，这远远不够，它的返回值、它所执行命令的返回值以及命令执行失败原因如何定位，这才是重点。当初因为这个函数风险较多，故抛弃不用，改用其他的方法。这里先不说我用了什么方法，这里必须要搞懂system()函数，因为还是有很多人用了<code>system()</code>函数，有时你不得不面对它。</p><p>先来看一下<code>system()</code>函数的简单介绍：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">int system(const char *command);</span><br><span class="line">system() executes a command specified in command by calling /bin/sh -c command, and returns after the command has been completed. During execution of the command, SIGCHLD will be blocked, and SIGINT and SIGQUIT will be ignored.</span><br></pre></td></tr></table></figure></p><p><code>system()</code>函数调用<code>/bin/sh</code>来执行参数指定的命令，<code>/bin/sh</code> 一般是一个软连接，指向某个具体的shell，比如bash，-c 选项是告诉shell从字符串 command 中读取命令；<br>在该command执行期间，SIGCHLD是被阻塞的，好比在说：hi，内核，这会不要给我送SIGCHLD信号，等我忙完再说；<br>在该command执行期间，SIGINT和SIGQUIT是被忽略的，意思是进程收到这两个信号后没有任何动作。</p><p>再来看一下system()函数返回值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The value returned is -1 on error (e.g. fork(2) failed), and the return status of the command otherwise. This latter return status is in the format specified in wait(2). Thus, the exit code of the command will be WEXITSTATUS(status). In case /bin/sh could not be executed, the exit status will be that of a command that does exit(127).</span><br><span class="line">If the value of command is NULL, system() returns nonzero if the shell is available, and zero if not.</span><br></pre></td></tr></table></figure></p><p>为了更好的理解<code>system()</code>函数返回值，需要了解其执行过程，实际上<code>system()</code>函数执行了三步操作：</p><ul><li>1.fork一个子进程；</li><li>2.在子进程中调用exec函数去执行command；</li><li>3.在父进程中调用wait去等待子进程结束。</li></ul><p>对于<code>fork()</code>失败，<code>system()</code>函数返回-1。<br>如果<code>exec()</code>执行成功，也即command顺利执行完毕，则返回command通过exit或return返回的值。<br>（注意，command顺利执行不代表执行成功，比如<code>command：&quot;rm debuglog.txt&quot;</code>，不管文件存不存在该command都顺利执行了）<br>如果<code>exec()</code>执行失败，也即command没有顺利执行，比如被信号中断，或者command命令根本不存在，<code>system()</code>函数返回127.<br>如果command为NULL，则<code>system()</code>函数返回非0值，一般为1.</p><p>看一下<code>system()</code>函数的源码<br>看完这些，我想肯定有人对system()函数返回值还是不清楚，看源码最清楚，下面给出一个<code>system()</code>函数的实现：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">system</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * cmdstring)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pid_t</span> pid;</span><br><span class="line">    <span class="keyword">int</span> status;</span><br><span class="line">    <span class="keyword">if</span>(cmdstring == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="number">1</span>); <span class="comment">//如果cmdstring为空，返回非零值，一般为1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((pid = fork())&lt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">status = <span class="number">-1</span>; <span class="comment">//fork失败，返回-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(pid == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">execl(<span class="string">"/bin/sh"</span>, <span class="string">"sh"</span>, <span class="string">"-c"</span>, cmdstring, (<span class="keyword">char</span> *)<span class="number">0</span>);</span><br><span class="line">_exit(<span class="number">127</span>); <span class="comment">// exec执行失败返回127，注意exec只在失败时才返回现在的进程，成功的话现在的进程就不存在啦~~</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">//父进程</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(waitpid(pid, &amp;status, <span class="number">0</span>) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(errno != EINTR)</span><br><span class="line">&#123;</span><br><span class="line">status = <span class="number">-1</span>; <span class="comment">//如果waitpid被信号中断，则返回-1</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> status; <span class="comment">//如果waitpid成功，则返回子进程的返回状态</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>仔细看完这个system()函数的简单实现，那么该函数的返回值就清晰了吧，那么什么时候system()函数返回0呢？只在command命令返回0时。</p><p>看一下该怎么监控system()函数执行状态<br>这里给我出的做法：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> status;</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">NULL</span> == cmdstring) <span class="comment">//如果cmdstring为空趁早闪退吧，尽管system()函数也能处理空指针</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> XXX;</span><br><span class="line">&#125;</span><br><span class="line">status = system(cmdstring);</span><br><span class="line"><span class="keyword">if</span>(status &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"cmd: %s\t error: %s"</span>, cmdstring, strerror(errno)); <span class="comment">// 这里务必要把errno信息输出或记入Log</span></span><br><span class="line">    <span class="keyword">return</span> XXX;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(WIFEXITED(status))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"normal termination, exit status = %d\n"</span>, WEXITSTATUS(status)); <span class="comment">//取得cmdstring执行结果</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(WIFSIGNALED(status))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"abnormal termination,signal number =%d\n"</span>, WTERMSIG(status)); <span class="comment">//如果cmdstring被信号中断，取得信号值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(WIFSTOPPED(status))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"process stopped, signal number =%d\n"</span>, WSTOPSIG(status)); <span class="comment">//如果cmdstring被信号暂停执行，取得信号值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>到于取得子进程返回值的相关介绍可以参考另一篇 <a href="http://my.oschina.net/renhc/blog/35116" target="_blank" rel="noopener">文章</a></p><p><code>system()</code>函数用起来很容易出错，返回值太多，而且返回值很容易跟command的返回值混淆。这里推荐使用<code>popen()</code>函数替代，关于<code>popen()</code>函数的简单使用也可以通过上面的链接查看。</p><p><code>popen()</code>函数较于<code>system()</code>函数的优势在于使用简单，<code>popen()</code>函数只返回两个值：<br>成功返回子进程的status，使用WIFEXITED相关宏就可以取得command的返回结果；<br>失败返回-1，我们可以使用<code>perro()</code>函数或<code>strerror()</code>函数得到有用的错误信息。</p><p>这篇文章只涉及了<code>system()</code>函数的简单使用，还没有谈及SIGCHLD、SIGINT和SIGQUIT对<code>system()</code>函数的影响，事实上，之所以今天写这篇文章，是因为项目中因有人使用了<code>system()</code>函数而造成了很严重的事故。现像是<code>system()</code>函数执行时会产生一个错误：<br>“No child processes”。</p><p>关于这个错误的分析，感兴趣的朋友可以看一下<a href="http://my.oschina.net/renhc/blog/54582" target="_blank" rel="noopener">这篇文章</a></p><p>原文链接： <a href="http://blog.csdn.net/shanzhizi/article/details/9053953" target="_blank" rel="noopener">http://blog.csdn.net/shanzhizi/article/details/9053953</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;linux尽量避免使用system。&lt;br&gt;曾经的曾经，被&lt;code&gt;system()&lt;/code&gt;函数折磨过，之所以这样，是因为对&lt;code&gt;system()&lt;/code&gt;函数了解不够深入。只是简单的知道用这个函数执行一个系统命令，这远远不够，它的返回值、它所执行命令的返
      
    
    </summary>
    
      <category term="后端" scheme="http://amyge.com/blog/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="C/C++" scheme="http://amyge.com/blog/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>jQuery.html()和innerHTML在IE8中失效</title>
    <link href="http://amyge.com/blog/post/e7d93b0c.html"/>
    <id>http://amyge.com/blog/post/e7d93b0c.html</id>
    <published>2018-03-12T12:26:43.000Z</published>
    <updated>2018-03-13T09:55:22.292Z</updated>
    
    <content type="html"><![CDATA[<p>代码如下：<br><img src="http://img.blog.csdn.net/20180228095419056?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2F5NzUxMjIzMzAz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p><p>在IE8上运行起来，下拉框中任何选项都没有，加打印发现<code>&lt;select&gt;</code>块中没有任何数据<br>正常现象应该是有两个选项才对<br>而在IE11上又能正常显示，看来是在IE8中 opt_html 中的内容没有填充进去</p><p>把<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"MDVR_MAIN_[CH]_BRM"</span>).html(opt_html);</span><br></pre></td></tr></table></figure></p><p>换成原生写法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'MDVR_MAIN_[CH]_BRM'</span>).innerHTML = opt_html;</span><br></pre></td></tr></table></figure></p><p>现象跟之前一样，但是加打印发现<code>&lt;select&gt;</code>块中有数据，如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CBR<span class="tag">&lt;/<span class="name">option</span>&gt;</span><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>VBR<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><em>？？？什么鬼？？？  为什么数据不完整？</em></p><p>一番百度，google后发现，原来<strong><em>IE8 及以下（IE7、IE6）版本对 innerHTML 设置的内容会做检查，只有当填充的内容为一个完整的html元素时才能加载成功</em></strong></p><p>根据这个思路，代码修改如下：<br><img src="http://img.blog.csdn.net/20180228100909342?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2F5NzUxMjIzMzAz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""><br>即用一个完整的标签包含想要添加的内容<br>正常运行！</p><hr><p>看到有网友说 append() 接口也有这种情况，以后遇到这类情况都要注意点咯</p><p>话说 IE 的坑真的很多，前端开发最痛苦的事就是要兼容IE浏览器吧，哈哈，幸好，我是后端攻城狮</p><h5 id="END"><a href="#END" class="headerlink" title="-END-"></a>-END-</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;代码如下：&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20180228095419056?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2F5NzUxMjIzMzAz/font/5a6L5L2T
      
    
    </summary>
    
      <category term="前端" scheme="http://amyge.com/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="jQuery" scheme="http://amyge.com/blog/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>开篇之作</title>
    <link href="http://amyge.com/blog/post/d49fef81.html"/>
    <id>http://amyge.com/blog/post/d49fef81.html</id>
    <published>2018-03-12T12:06:23.000Z</published>
    <updated>2018-03-13T09:26:57.922Z</updated>
    
    <content type="html"><![CDATA[<p>这个博客搭建起来还真是不容易，走了好多弯路，甚至都打算纯手写实现了（维护起来太麻烦了）<br>主要是没有方向，幸亏加了一个交流群，群主是个老司机，指点了一下，豁然开朗，然后一个小时就搭好了（论方向的重要性…）<br>前两天一直在想一件事，就是页面的URL改变了，但是界面内容只有部分改变了，比如页面整体布局、标题栏、广告信息(如果有的话)是一直不变的，只有文章内容在改变，这是怎么实现的，难道每个文章界面都把标题栏、广告信息什么的加上？这显然不可能，维护起来巨麻烦。<br>看网上说<code>&lt;iframe&gt;</code>标签可以干这事，它确实可以加载外部界面，但是URL并不会改变啊，是我使用姿势不对么？<br>还有一种办法是使用<code>#</code>符号，表示一个位置，可以起到这种作用，目前公司项目就是用的这种办法，貌似不主流啊，除了twitter最近用上了，没见哪里用了<br>这事到现在还没想明白，没办法，知识面太窄，看到这篇文章的大神，如果有知道的，请告诉我，感激不尽！</p><p>总结一下，还是得多加群，多进论坛，多问。</p><p>Mark：<br>主题配置<a href="http://chaoo.oschina.io/2016/12/29/BlueLake%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE.html" target="_blank" rel="noopener">BlueLake博客主题的详细配置</a><br>主页<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这个博客搭建起来还真是不容易，走了好多弯路，甚至都打算纯手写实现了（维护起来太麻烦了）&lt;br&gt;主要是没有方向，幸亏加了一个交流群，群主是个老司机，指点了一下，豁然开朗，然后一个小时就搭好了（论方向的重要性…）&lt;br&gt;前两天一直在想一件事，就是页面的URL改变了，但是界面内容
      
    
    </summary>
    
      <category term="杂谈" scheme="http://amyge.com/blog/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="http://amyge.com/blog/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
</feed>
